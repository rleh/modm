#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2018, Niklas Hauser
# Copyright (c) 2017, Fabian Greif
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

def init(module):
    module.name = "dma"
    module.parent = "platform"

def prepare(module, options):
    device = options[":target"]
    if not device.has_driver("dma:stm32*"):
        return False

    module.depends(":cmsis:device")

    return True

def build(env):
    device = env[":target"]
    driver = device.get_driver("dma")

    properties = device.properties
    properties["target"] = device.identifier
    properties["partname"] = device.partname

    properties["ids"] = driver["instance"]
    properties["slots"] = None
    properties["type"] = driver["type"]
    properties["id"] = None

    features = {
        "double_buffer": False,
        "circular_mode": False,
        "request_mux": True,
        "burst": False,
    }
    properties["feature"] = features

    def findInstance(stream, id):
        for s in stream:
            if s["instance"] == str(id):
                return s
        return None


    import json
    peripherals = []
    mux = {}
    if driver["type"] == "stm32-stream-channel":
        for dma_id in properties["ids"]:
            streamlist = findInstance(driver["streams"], dma_id)["stream"]
            for stream in streamlist:
                for channel in stream["channel"]:
                    for signal in channel["signal"]:
                        name = signal["driver"].capitalize() + (signal["instance"] if "instance" in signal else "") + signal["name"].capitalize()
                        peripherals.append(name)
                        if name not in mux:
                            mux[name] = []
                        mux[name].append(dict(instance=dma_id, slot=stream["position"], channel=stream["position"], request=channel["position"]))
    else:
        raise NotImplementedError


    print(json.dumps(sorted(set(peripherals)), indent=2))
    print(json.dumps(mux, indent=2))

    properties["peripherals"] = peripherals
    properties["mux"] = mux


    # TODO WIP
    properties["slots"] = range(0,8)

    env.substitutions = properties
    env.outbasepath = "modm/src/modm/platform/dma"

    env.template("dmahal.hpp.in")
    env.template("dmahal_slotbase.hpp.in")
    for dma_id in properties["ids"]:
        properties["id"] = dma_id
        env.template("dmahal_id.hpp.in", "dmahal_{}.hpp".format(dma_id))
        env.template("dmahal_id.cpp.in", "dmahal_{}.cpp".format(dma_id))
