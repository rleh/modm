#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2018, Niklas Hauser
# Copyright (c) 2017, Fabian Greif
# Copyright (c) 2018, Christopher Durand
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

from collections import namedtuple
from enum import Enum

def load_options(module):
    module.add_option(
        NumericOption(
            name="buffer.tx",
            description="",
            minimum=1, maximum=2 ** 16 - 2,
            default=32))
    module.add_option(
        NumericOption(
            name="buffer.rx",
            description="",
            minimum=1, maximum=2 ** 16 - 2,
            default=32))

def init(module):
    module.name = "can"
    module.parent = "platform"
    module.description = "Controller Area Network (CAN)"

def prepare(module, options):
    device = options[":target"]
    if not device.has_driver("can:avr"):
        return False

    module.depends(
        ":architecture:assert",
        ":architecture:atomic",
        ":architecture:can",
        ":architecture:clock",
        ":architecture:delay",
        ":architecture:interrupt",
        ":debug",
        ":platform:can.common",
        ":platform:gpio",
        ":utils")

    driver = device.get_driver("can")
    # If there is only one instance of the peripheral it is not numbered and
    # merged into the generic can module.
    if "instance" in driver:
        for instance in listify(driver["instance"]):
            module.add_submodule(Instance(int(instance)))
    else:
        load_options(module)

    return True

def build(env):
    device = env[":target"]
    driver = device.get_driver("can")

    properties = device.properties
    properties["target"] = device.identifier
    properties["driver"] = driver

    env.substitutions = properties
    env.outbasepath = "modm/src/modm/platform/can"

    env.template("can_filter.hpp.in")
    env.template("can_filter.cpp.in")
    env.copy("error_code.hpp")
    env.template("can.hpp.in")
    env.template("can.cpp.in")
