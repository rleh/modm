/*
 * Copyright (c) 2019, Raphael Lehmann
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_STM32_CAN{{ id }}_HPP
#define MODM_STM32_CAN{{ id }}_HPP

#include <modm/architecture/interface/can.hpp>
#include <modm/platform/gpio/connector.hpp>
#include "../device.hpp"

#include "can_bit_timings.hpp"


namespace modm
{

namespace platform
{

/**
 * @brief		FDCAN{{ id }} (CAN with Flexible Data-Rate)
 *
 * The controller area network (CAN) subsystem consists of one CAN module,
 * a shared Message RAM memory and a configuration block.
 * The modules (FDCAN) are compliant with ISO 11898-1: 2015 (CAN protocol
 * specification version 2.0 part A, B) and CAN FD protocol specification version 1.0.
 * A 0.8 Kbyte Message RAM per FDCAN instance implements filters, receive FIFOs,
 * transmit event FIFOs and transmit FIFOs.
 *
 * ## Filter
 * Up to 28 filters can be defined for 11-bit IDs, up to 8 filters for 29-bit IDs.
 * The filter banks are not shared between the CAN instances.
 *
 * ## Configuration
 * You can set the buffer size using the `tx_buffer` and `rx_buffer` parameters.
 *
 * @author		Raphael Lehmann <raphael@rleh.de>
 * @ingroup		modm_platform_can_{{ id }}
 */
class Can{{ id }} : public ::modm::Can
{
public:
	enum class
	Mode : uint32_t
	{
		Configuration,
		Normal,
		Restricted,
		Monitoring,
		//Sleep,
		// various test modes:
		TestExternalLoopback,
		TestInternalLoopback,

		// compatibility:
		ListenOnly = Monitoring, // no acknowledging
		LoopBack = TestInternalLoopback,
		//ListenOnlyLoopBack not supported(?)

	};

	// Expose jinja template parameters to be checked by e.g. drivers or application
	static constexpr size_t RxBufferSize = {{ options["buffer.rx"] }};
	static constexpr size_t TxBufferSize = {{ options["buffer.tx"] }};

private:
	/// Private Initializer with computed prescaler and timing constants
	static void
	initializeWithPrescaler(uint16_t prescaler, uint8_t bs1, uint8_t bs2,
			uint32_t interruptPriority, Mode startupMode, bool overwriteOnOverrun);
public:
	template< template<Peripheral _> class... Signals >
	static void
	connect(Gpio::InputType inputType = Gpio::InputType::Floating)
	{
		using Connector = GpioConnector<Peripheral::Can{{ id }}, Signals...>;
		using Tx = typename Connector::template GetSignal< Gpio::Signal::Tx >;
		using Rx = typename Connector::template GetSignal< Gpio::Signal::Rx >;
		static_assert(Connector::template IsValid<Tx> and Connector::template IsValid<Rx> and sizeof...(Signals) == 2,
					  "Can{{ id }}::connect() requires one Tx and one Rx signal!");

		// Connector::disconnect();
		Tx::setOutput(Gpio::OutputType::PushPull);
		Rx::setInput(inputType);
		Connector::connect();
	}

	/**
	 * Enables the clock for the CAN controller and resets all settings
	 *
	 * \param bitrate
	 * 			CAN bitrate (defined in driver/connectivity/can/message.hpp)
	 * \param interruptPriority
	 * 			Interrupt vector priority (0=highest to 15=lowest)
	 * \param overwriteOnOverrun
	 * 			Once a receive FIFO is full the next incoming message
	 * 			will overwrite the previous one if \c true otherwise
	 * 			the incoming message will be discarded
	 *
	 * \warning	Has to called after connect(), but before any
	 * 			other function from this class!
	 */
	template< class SystemClock, bitrate_t bitrate=kbps(125), percent_t tolerance=pct(1) >
	static inline void
	initialize(	uint32_t interruptPriority, Mode startupMode = Mode::Normal,
				bool overwriteOnOverrun = true)
	{
		using Timings = CanBitTiming<SystemClock::Can{{ id }}, bitrate>;

		Timings::template assertBitrateInTolerance<tolerance>();

		return initializeWithPrescaler(
			Timings::getPrescaler(),
			Timings::getBS1(),
			Timings::getBS2(),
			interruptPriority,
			startupMode,
			overwriteOnOverrun);
	}

	/**
	 * The the operating mode.
	 *
	 * Default after initialization is the normal mode.
	 */
	static void
	setMode(Mode mode);

	static void
	setAutomaticRetransmission(bool retransmission);

public:
	// Can Interface Methods
	static bool
	isMessageAvailable();

	static bool
	getMessage(can::Message& message, uint8_t *filter_id=nullptr);

	static bool
	isReadyToSend();

	static bool
	sendMessage(const can::Message& message);

public:
	// Extended Functionality
	/**
	 * Get Receive Error Counter.
	 *
	 * In case of an error during reception, this counter is
	 * incremented by 1 or by 8 depending on the error condition as
	 * defined by the CAN standard. After every successful reception
	 * the counter is decremented by 1 or reset to 120 if its value
	 * was higher than 128. When the counter value exceeds 127, the
	 * CAN controller enters the error passive state.
	 */
	static inline uint32_t
	getReceiveErrorCounter()
	{
		return 42; // TODO
	}

	/**
	 * Get Transmit Error Counter.
	 *
	 */
	static inline uint32_t
	getTransmitErrorCounter()
	{
		return 42; // TODO
	}

	static BusState
	getBusState();

	/**
	 * Enable the error and status change interrupt.
	 *
	 * Can be generated by the following events:
	 * - Error condition, for more details on error conditions please
	 *   refer to the CAN Error Status register (CAN_ESR).
	 * - Wakeup condition, SOF monitored on the CAN Rx signal.
	 * - Entry into Sleep mode
	 *
	 * You need to create you own interrupt handler for this interrupt.
	 * The interrupt handler has a fixed name:
	 * \code
	 * MODM_ISR(CAN{{ id }}_SCE)
	 * {
	 *     ...
	 *
	 *     // e.g. Acknowledge interrupt
	 *     CAN{{ id }}->MSR = CAN_MSR_ERRI;
	 * }
	 * \endcode
	 *
	 * \param interruptEnable
	 * 			Upper 24-bit of the CAN_IER register. E.g.:
	 * 			 - CAN_IER_BOFIE
	 * 			 - CAN_IER_EPVIE
	 * 			 - ...
	 * 			See Reference Manual >> bxCAN >> CAN_IER Register
	 * \param interruptPriority
	 * 			Interrupt vector priority (0=highest to 15=lowest)
	 */
	static void
	enableStatusChangeInterrupt(uint32_t interruptEnable,
			uint32_t interruptPriority);
};

}	// namespace platform

}	// namespace modm

#endif	//  MODM_STM32_CAN{{ id }}_HPP
